import { camel } from 'change-case';
import { FileStylesResponse, FullStyleMetadata } from 'figma-js';
import * as fs from 'fs';
import * as path from 'path';
import { regexName } from '../constants/figma-colors.constants';
import { fetchObjectById } from '../service/figma-api';
import { FigmaColor } from './figma-colors.model';

export function parseFigmaColors(data: FileStylesResponse['meta']['styles']) {
  const project = JSON.parse(fs.readFileSync(path.join(__dirname, '../../package.json'), 'utf-8'));

  fs.mkdirSync(path.join(__dirname, '../../lib/dist/color-render'), { recursive: true });

  fs.writeFileSync(
    path.join(__dirname, '../../lib/dist/color-render/design-system-color.ts'),
    `/** auto-generated by ${project.name} v${project.version} */\n
    import { FigmaColor } from '@newrade/core-figma-extractor/src';\n\n`
  );

  return data.map(async (key: FullStyleMetadata, index) => {
    try {
      if (key.style_type === 'FILL' && regexName.test(key.name)) {
        const result = await fetchObjectById(key.node_id);
        const colorStyle = await result.json();

        const newColor = getFigmaColor(colorStyle, key.node_id);

        createColorPalette(newColor);
      }
    } catch (error) {
      console.log(key);
      console.log(error);
    }
  });
}

export function getFigmaColor(rawColor: any, key: string | number): FigmaColor {
  const nameNode: string[] = rawColor.nodes[key].document.name.split('/');

  const newFigmaColor: FigmaColor = {
    id: `${key}`,
    colorType: camel(nameNode[1]),
    colorLevel: nameNode[2],
    r: rawColor.nodes[key].document.fills[0].color['r'],
    g: rawColor.nodes[key].document.fills[0].color['g'],
    b: rawColor.nodes[key].document.fills[0].color['b'],
    a: rawColor.nodes[key].document.fills[0].color['a'],
  };

  return newFigmaColor;
}

const createColorPalette = (colorObject: FigmaColor) => {
  const colorTemplate = `export const ${colorObject.colorType + colorObject.colorLevel}: FigmaColor = { id: '${
    colorObject.id
  }',colorType: '${colorObject.colorType}', colorLevel: '${colorObject.colorLevel}', r: ${colorObject.r}, g: ${
    colorObject.g
  }, b: ${colorObject.b}, a: ${colorObject.a}};\n`;

  fs.appendFile(path.join(__dirname, '../../lib/dist/color-render/design-system-color.ts'), colorTemplate, (err) => {
    if (err) throw err;
    console.log(`New color added ${colorObject.colorType + colorObject.colorLevel} + id: ${colorObject.id}`);
  });
};
