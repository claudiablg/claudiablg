import { camel } from 'case';
import { FileNodesResponse, FileStylesResponse, FullStyleMetadata } from 'figma-js';
import * as fs from 'fs';
import * as path from 'path';
import * as prettier from 'prettier';
import { regexName } from '../constants/figma-colors.constants';
import { fetchObjectById } from '../service/figma-api';
import { ColorTokens, FigmaColor, FILES_TYPE_LIST } from './figma-colors.model';

export function parseFigmaColors(data: FileStylesResponse['meta']['styles']) {
  const project = JSON.parse(fs.readFileSync(path.join(__dirname, '../../package.json'), 'utf-8'));

  fs.mkdirSync(path.join(__dirname, '../../figma'), { recursive: true });

  /**
   * Writing all export files
   */
  Object.keys(FILES_TYPE_LIST).forEach((fileType: string) => {
    fs.writeFileSync(
      //@ts-ignore
      path.join(__dirname, FILES_TYPE_LIST[fileType]),
      `/** auto-generated by ${project.name} v${project.version} - ${new Date()
        .toLocaleDateString()
        .split('/')
        .join('-')} */\n`
    );
  });

  const dataToken: ColorTokens = {};

  const requests = data.map(async (key: FullStyleMetadata, index) => {
    try {
      if (key.style_type === 'FILL' && regexName.test(key.name)) {
        const result = await fetchObjectById(key.node_id);
        const colorStyle: FileNodesResponse = await result.json();

        const newColor = getFigmaColor(colorStyle, key.node_id);
        dataToken[`${newColor.colorType + newColor.colorLevel}`] = newColor;
        return dataToken;
      }
    } catch (error) {
      console.log(key);
      console.log(error);
    }
  });

  Promise.all(requests)
    .then((result) => {
      createColorPaletteCSS(dataToken);
      createColorPaletteSCSS(dataToken);
      createColorPaletteTS(dataToken);
      createColorPaletteJSON(dataToken);
    })
    .catch((error) => {
      console.log(error);
    });
}

export function getFigmaColor(rawColor: any, key: string | number): FigmaColor {
  const nameNode: string[] = rawColor.nodes[key].document.name.split('/');

  const newFigmaColor: FigmaColor = {
    id: `${key}`,
    colorType: camel(nameNode[1]),
    colorLevel: nameNode[2],
    r: rawColor.nodes[key].document.fills[0].color['r'],
    g: rawColor.nodes[key].document.fills[0].color['g'],
    b: rawColor.nodes[key].document.fills[0].color['b'],
    a: rawColor.nodes[key].document.fills[0].color['a'],
  };

  return newFigmaColor;
}

const createColorPaletteSCSS = (colorObject: ColorTokens) => {
  let allColorsString: string = '';
  Object.keys(colorObject).forEach((color) => {
    allColorsString += `$color-${colorObject[color].colorType}-${colorObject[color].colorLevel}: rgba(${colorObject[color].r}${colorObject[color].g}${colorObject[color].b}${colorObject[color].a});\n`;
  });

  fs.appendFile(path.join(__dirname, FILES_TYPE_LIST.SCSS), `${allColorsString}`, (err) => {
    if (err) throw err;
    console.log(`New colors SCSS added`);
  });

  const fileContent = fs.readFileSync(path.join(__dirname, FILES_TYPE_LIST.SCSS), 'utf-8');

  fs.writeFileSync(
    path.join(__dirname, FILES_TYPE_LIST.SCSS),
    `${prettier.format(fileContent, {
      parser: 'scss',
      singleQuote: true,
      tabWidth: 2,
    })}`
  );
};

const createColorPaletteCSS = (colorObject: ColorTokens) => {
  let colorsString: string = '';
  Object.keys(colorObject).forEach((color) => {
    colorsString += `--color-${colorObject[color].colorType}-${colorObject[color].colorLevel}: rgba(${colorObject[color].r}${colorObject[color].g}${colorObject[color].b}${colorObject[color].a});\n`;
  });
  fs.appendFile(path.join(__dirname, FILES_TYPE_LIST.CSS), `:root  { ${colorsString} }`, (err) => {
    if (err) throw err;
    console.log(`New colors CSS added`);
  });

  const fileContent = fs.readFileSync(path.join(__dirname, FILES_TYPE_LIST.CSS), 'utf-8');

  fs.writeFileSync(
    path.join(__dirname, FILES_TYPE_LIST.CSS),
    `${prettier.format(fileContent, {
      parser: 'css',
      singleQuote: true,
      tabWidth: 2,
    })}`
  );
};

const createColorPaletteTS = (colorObject: ColorTokens) => {
  const colorsKeys = Object.keys(colorObject).map((color) => {
    return `'${color}': { 
      id: '${colorObject[color].id}',
      colorType: '${colorObject[color].colorType}',
      colorLevel: '${colorObject[color].colorLevel}',
      r: ${colorObject[color].r},
      g: ${colorObject[color].g},
      b: ${colorObject[color].b},
      a: ${colorObject[color].a}
    }`;
  });

  const colors = `export const colors: ColorTokens = { ${colorsKeys} }`;

  fs.appendFile(
    path.join(__dirname, FILES_TYPE_LIST.TS),
    `import { ColorTokens } from '@newrade/core-figma-extractor/src';\n ${colors}`,
    (err) => {
      if (err) throw err;
      console.log(`New colors TS added`);
    }
  );
  const fileContent = fs.readFileSync(path.join(__dirname, FILES_TYPE_LIST.TS), 'utf-8');

  fs.writeFileSync(
    path.join(__dirname, FILES_TYPE_LIST.TS),
    `${prettier.format(fileContent, {
      parser: 'typescript',
      singleQuote: true,
      tabWidth: 2,
    })}`
  );
};

const createColorPaletteJSON = (colorObject: ColorTokens) => {
  fs.appendFile(path.join(__dirname, FILES_TYPE_LIST.JSON), `${JSON.stringify(colorObject, null, 2)}`, (err) => {
    if (err) throw err;
    console.log(`New colors JSON added`);
  });

  const fileContent = fs.readFileSync(path.join(__dirname, FILES_TYPE_LIST.JSON), 'utf-8');

  fs.writeFileSync(
    path.join(__dirname, FILES_TYPE_LIST.JSON),
    `${prettier.format(fileContent, {
      parser: 'json5',
      requirePragma: true,
    })}`
  );
};
