import { camel } from 'change-case';
import { FileResponse } from 'figma-js';
import * as fs from 'fs';
import * as path from 'path';
import { fetchObjectById } from '../service/figma-api';
import { FigmaColor } from './figma-colors.model';
/**
 * @ extended type of the fills
 *    Todo later text
 */

export function parseFigmaColors(data: FileResponse['styles']) {
  const project = JSON.parse(fs.readFileSync(path.join(__dirname, '../../package.json'), 'utf-8'));

  fs.mkdirSync(path.join(__dirname, '../../lib/dist/color-render'), { recursive: true });

  fs.writeFileSync(
    path.join(__dirname, '../../lib/dist/color-render/design-system-color.ts'),
    `/** auto-generated by ${project.name} v${project.version} */\n
    import { FigmaColor } from '@newrade/core-figma-extractor/src';\n\n`
  );

  return Object.keys(data).map(async (key: keyof FileResponse['styles']) => {
    if (data[key].styleType === 'FILL' && !data[key].name.includes('Image')) {
      try {
        /**
         * todo regex for spliting primary
         * checkout core-design-system
         */
        const result = await fetchObjectById(key);
        const colorStyle = await result.json();
        return getFigmaColor(colorStyle, key);
        //  createColorPalette(colorStyle, key);
      } catch (error) {
        console.log(error);
      }
    }
  });
}

export function getFigmaColor(rawColor: any, id: string | number): FigmaColor {
  const newFigmaColor: FigmaColor = {
    id: `${id}`,
    name: camel(rawColor.nodes[id].document.name),
    r: `${rawColor.nodes[id].document.fills[0].color['r']}`,
    g: `${rawColor.nodes[id].document.fills[0].color['g']}`,
    b: `${rawColor.nodes[id].document.fills[0].color['b']}`,
    a: `${rawColor.nodes[id].document.fills[0].color['a']}`,
  };

  createColorPalette(newFigmaColor);
  return newFigmaColor;
}

const createColorPalette = (colorObject: FigmaColor) => {
  /**
   * introduce ts-check
   * add prettier
   * validation read to not append not new colors
   */

  // const name = snake(colorObject.nodes[colo].document.name);

  const colorTemplate = `export const ${colorObject.name}: FigmaColor = { id: '${colorObject.id}', r: '${colorObject.r}', g: '${colorObject.g}', b: '${colorObject.b}', a: '${colorObject.a}'};\n`;

  fs.appendFile(path.join(__dirname, '../../lib/dist/color-render/design-system-color.ts'), colorTemplate, (err) => {
    if (err) throw err;
    console.log(`New color added ${colorObject.name} + id: ${colorObject.id}`);
  });
  // writeStream.write(value);

  // writeStream.on('finish', () => {
  //   console.log('wrote all data to file');
  // });

  // fs.writeFile(path.join(__dirname, '../../lib/color-render/design-system-color.ts'), value, function (err) {
  //   if (err) {
  //     return console.error(err);
  //   }
  //   console.log('File created!');
  // });
};
