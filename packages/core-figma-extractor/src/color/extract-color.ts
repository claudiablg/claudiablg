import { camel } from 'change-case';
import { FileNodesResponse, FileStylesResponse, FullStyleMetadata } from 'figma-js';
import * as fs from 'fs';
import * as path from 'path';
import * as prettier from 'prettier';
import { regexName } from '../constants/figma-colors.constants';
import { fetchObjectById } from '../service/figma-api';
import { ColorTokens, FigmaColor } from './figma-colors.model';

export function parseFigmaColors(data: FileStylesResponse['meta']['styles']) {
  const project = JSON.parse(fs.readFileSync(path.join(__dirname, '../../package.json'), 'utf-8'));

  fs.mkdirSync(path.join(__dirname, '../../figma'), { recursive: true });

  fs.writeFileSync(
    path.join(__dirname, '../../figma/design-system-color.ts'),
    `/** auto-generated by ${project.name} v${project.version} */\n
    import { ColorTokens } from '@newrade/core-figma-extractor/src';\n\n`
  );

  const dataToken: ColorTokens = {};

  const requests = data.map(async (key: FullStyleMetadata, index) => {
    try {
      if (key.style_type === 'FILL' && regexName.test(key.name)) {
        const result = await fetchObjectById(key.node_id);
        const colorStyle: FileNodesResponse = await result.json();

        const newColor = getFigmaColor(colorStyle, key.node_id);
        dataToken[`${newColor.colorType + newColor.colorLevel}`] = newColor;
        return dataToken;
      }
    } catch (error) {
      console.log(key);
      console.log(error);
    }
  });

  Promise.all(requests)
    .then((result) => {
      createColorPalette(dataToken);
    })
    .catch((error) => {
      console.log(error);
    });
}

export function getFigmaColor(rawColor: any, key: string | number): FigmaColor {
  const nameNode: string[] = rawColor.nodes[key].document.name.split('/');

  const newFigmaColor: FigmaColor = {
    id: `${key}`,
    colorType: camel(nameNode[1]),
    colorLevel: nameNode[2],
    r: rawColor.nodes[key].document.fills[0].color['r'],
    g: rawColor.nodes[key].document.fills[0].color['g'],
    b: rawColor.nodes[key].document.fills[0].color['b'],
    a: rawColor.nodes[key].document.fills[0].color['a'],
  };

  return newFigmaColor;
}

const createColorPalette = (colorObject: ColorTokens) => {
  const colorsKeys = Object.keys(colorObject).map((color) => {
    return `'${color}': { 
      id: '${colorObject[color].id}',
      colorType: '${colorObject[color].colorType}',
      colorLevel: '${colorObject[color].colorLevel}',
      r: ${colorObject[color].r},
      g: ${colorObject[color].g},
      b: ${colorObject[color].b},
      a: ${colorObject[color].a},
    }`;
  });

  const colors = `export const colors: ColorTokens = { ${colorsKeys} }`;

  fs.appendFile(path.join(__dirname, '../../figma/design-system-color.ts'), `${colors}`, (err) => {
    if (err) throw err;
    console.log(`New colors added`);
  });

  const fileContent = fs.readFileSync(path.join(__dirname, '../../figma/design-system-color.ts'), 'utf-8');

  fs.writeFileSync(
    path.join(__dirname, '../../figma/design-system-color.ts'),
    `${prettier.format(fileContent, {
      parser: 'typescript',
      singleQuote: true,
      tabWidth: 2,
    })}`
  );
};
