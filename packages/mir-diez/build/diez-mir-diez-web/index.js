// This file was generated with Diez - https://diez.org
// Do not edit this file directly.

module.exports = {};

if (typeof process === 'undefined' || !process) {
  process = {env: {}};
} else if (!process.env) {
  Object.defineProperty(process, 'env', {
    value: {},
  });
}

const Environment = {
  serverUrl: process.env.DIEZ_SERVER_URL || '/diez',
  isHot: process.env.DIEZ_IS_HOT,
};

const diezHTMLExtensions = [];

class Diez {
  constructor (componentType) {
    if (typeof document !== 'undefined') {
      this.iframe = document.createElement('iframe');
    } else {
      this.iframe = {};
    }

    this.componentType = componentType;
    this.component = new this.componentType();
    this.subscribers = [];
  }

  static applyHTMLExtensions () {
    diezHTMLExtensions.forEach((extension) => {
      if (extension instanceof Function) {
        extension();
      }
    });
  }

  broadcast () {
    for (const subscriber of this.subscribers) {
      subscriber(this.component);
    }
  }

  subscribe (subscriber) {
    this.subscribers.push(subscriber);
  }

  attach (subscriber) {
    subscriber(this.component);
    if (!Environment.isHot) {
      return;
    }
    this.subscribe(subscriber);
    if (this.iframe.contentWindow) {
      return;
    }
    this.iframe.src = `${Environment.serverUrl}/components/${this.component.constructor.name}`;
    this.iframe.width = '0';
    this.iframe.height = '0';
    this.iframe.style.display = 'none';

    if (typeof document !== 'undefined') {
      document.body.appendChild(this.iframe);
      window.addEventListener('message', (event) => {
        if (event.source === this.iframe.contentWindow && event.origin.startsWith(Environment.serverUrl)) {
          this.component = new this.componentType(JSON.parse(event.data));
          this.broadcast();
        }
      });
    }
  }
}

module.exports.Diez = Diez;

/**
 * A component encapsulating color, including alpha transparency.
 * 
 * You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and
 * [[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.
 *
 */
class Color {
  constructor({
    h,
    s,
    l,
    a
  }) {
    /**
     * Provides simple hue-saturation-lightness-alpha color data.
     *
     * 0
     */
    this.h = h;
    /**
     * Provides simple hue-saturation-lightness-alpha color data.
     *
     * 0
     */
    this.s = s;
    /**
     * Provides simple hue-saturation-lightness-alpha color data.
     *
     * 1
     */
    this.l = l;
    /**
     * Provides simple hue-saturation-lightness-alpha color data.
     *
     * 1
     */
    this.a = a;
  }
}


module.exports.Color = Color;

const {colorToCss, colorToLowFidelityCss} = require('@diez/web-sdk-common');

Object.defineProperties(Color.prototype, {
  color: {
    get () {
      return colorToCss(this);
    },
  },
  lowFidelityColor: {
    get () {
      return colorToLowFidelityCss(this);
    },
  },
  colorStyle: {
    get () {
      return {
        color: this.color,
      };
    },
  },
  backgroundColorStyle: {
    get () {
      return {
        backgroundColor: this.color,
      };
    },
  },
  borderColorStyle: {
    get () {
      return {
        borderColor: this.color,
      };
    },
  },
  outlineColorStyle: {
    get () {
      return {
        outlineColor: this.color,
      };
    },
  },
});

class MirDesignSystemColors {
  constructor({
    mirLightGreyscaleInverted = {h: 0, s: 0, l: 1, a: 1},
    utilityLightGreyscaleAlmostTransparent = {h: 0, s: 0, l: 1, a: 0.00009999999747378752},
    utilityLightGreyscaleGreyLight = {h: 0, s: 0, l: 0.8784313725490196, a: 1},
    utilityLightGreyscaleBlack = {h: 0, s: 0, l: 0.16862745098039217, a: 1},
    utilityLightGreyscaleAlmostTransparent1 = {h: 0, s: 0, l: 1, a: 0.00009999999747378752},
    utilityLightGreyscaleGreyMedium = {h: 0, s: 0, l: 0.27058823529411763, a: 1},
    utilityLightGreyscaleAlmostTransparent2 = {h: 0, s: 0, l: 1, a: 0.00009999999747378752},
    utilityLightGreyscaleAlmostTransparent3 = {h: 0, s: 0, l: 1, a: 0.00009999999747378752},
    utilityLightGreyscaleGreyMedium1 = {h: 0, s: 0, l: 0.27058823529411763, a: 1},
    utilityLightGreyscaleTransparent = {h: 0, s: 0, l: 1, a: 1},
    mirLightGreyscale0 = {h: 0, s: 0, l: 1, a: 1},
    mirLightAccent1500 = {h: 0.10975609756097561, s: 0.9534883720930233, l: 0.5784313725490196, a: 1},
    mirLightPrimary500 = {h: 0.6342342342342343, s: 0.8604651162790697, l: 0.5784313725490196, a: 1},
    mirLightPrimary300 = {h: 0.6336206896551725, s: 0.865671641791045, l: 0.7372549019607844, a: 1},
    mirLightPrimary700 = {h: 0.6343804537521814, s: 0.8642533936651583, l: 0.43333333333333335, a: 1},
    mirLightGreyscale100 = {h: 0.6111111111111114, s: 0.2500000000000006, l: 0.9529411764705882, a: 1},
    mirLightGreyscale200 = {h: 0.5999999999999998, s: 0.27777777777777746, l: 0.9294117647058824, a: 1},
    mirLightGreyscale300 = {h: 0.5909090909090912, s: 0.15492957746478858, l: 0.8607843137254902, a: 1},
    mirLightUtilityGreen1000 = {h: 0.3333333333333333, s: 0.7647058823529412, l: 0.2, a: 1},
    mirLightUtilityYellow1000 = {h: 0.14619883040935674, s: 0.8507462686567163, l: 0.13137254901960785, a: 1},
    mirLightUtilityRed1000 = {h: 0, s: 0.7647058823529412, l: 0.2, a: 1},
    mirLightPrimary1000 = {h: 0.6354166666666666, s: 0.8648648648648649, l: 0.14509803921568626, a: 1},
    mirLightPrimary100 = {h: 0.6340579710144928, s: 0.8518518518518517, l: 0.8941176470588235, a: 1},
    mirLightAccent11000 = {h: 0.10952380952380952, s: 0.9459459459459458, l: 0.21764705882352942, a: 1},
    mirLightAccent1700 = {h: 0.10984848484848485, s: 0.9565217391304346, l: 0.36078431372549025, a: 1},
    mirLightAccent1300 = {h: 0.11038961038961036, s: 0.9506172839506175, l: 0.8411764705882353, a: 1},
    mirLightAccent1100 = {h: 0.11333333333333333, s: 0.9259259259259262, l: 0.9470588235294117, a: 1},
    utilityLightGreyscaleGreyMedium2 = {h: 0, s: 0, l: 0.27058823529411763, a: 1},
    mirLightGreyscale100White = {h: 0, s: 0, l: 1, a: 1},
    mirLightGreyscale150 = {h: 0.6041666666666669, s: 0.17391304347826095, l: 0.9098039215686275, a: 1},
    mirLightGreyscale200White = {h: 0, s: 0, l: 1, a: 1},
    mirLightGreyscale400 = {h: 0.587719298245614, s: 0.15447154471544702, l: 0.7588235294117647, a: 1},
    mirLightGreyscale500 = {h: 0.5892857142857143, s: 0.1521739130434782, l: 0.6392156862745098, a: 1},
    mirLightGreyscale600 = {h: 0.6527777777777778, s: 0.09917355371900821, l: 0.5254901960784314, a: 1},
    mirLightGreyscale700 = {h: 0.6507936507936508, s: 0.10047846889952151, l: 0.40980392156862744, a: 1},
    mirLightGreyscale800 = {h: 0.6547619047619048, s: 0.09459459459459456, l: 0.2901960784313725, a: 1},
    mirLightGreyscale900 = {h: 0.6481481481481483, s: 0.10344827586206892, l: 0.17058823529411765, a: 1},
    mirLightGreyscale1000 = {h: 0.6666666666666666, s: 0.0967741935483871, l: 0.060784313725490195, a: 1},
    mirLightUtilityGreen700 = {h: 0.3333333333333333, s: 0.7722772277227722, l: 0.396078431372549, a: 1},
    mirLightUtilityGreen500 = {h: 0.3333333333333333, s: 0.7666666666666665, l: 0.5294117647058824, a: 1},
    mirLightUtilityGreen300 = {h: 0.3333333333333333, s: 0.7666666666666665, l: 0.7647058823529411, a: 1},
    mirLightUtilityGreen100 = {h: 0.3333333333333333, s: 0.8000000000000006, l: 0.9411764705882353, a: 1},
    mirLightUtilityYellow700 = {h: 0.14539007092198583, s: 0.8343195266272189, l: 0.33137254901960783, a: 1},
    mirLightUtilityYellow500 = {h: 0.14438943894389436, s: 0.8416666666666668, l: 0.5294117647058824, a: 1},
    mirLightUtilityYellow300 = {h: 0.14417989417989419, s: 0.8399999999999997, l: 0.7058823529411764, a: 1},
    mirLightUtilityYellow100 = {h: 0.14102564102564094, s: 0.8666666666666671, l: 0.9411764705882353, a: 1},
    mirLightUtilityRed700 = {h: 0, s: 0.7751479289940829, l: 0.33137254901960783, a: 1},
    mirLightUtilityRed500 = {h: 0, s: 0.7666666666666665, l: 0.5294117647058824, a: 1},
    mirLightUtilityRed300 = {h: 0, s: 0.7666666666666665, l: 0.7647058823529411, a: 1},
    mirLightUtilityRed100 = {h: 0, s: 0.8000000000000006, l: 0.9607843137254902, a: 1},
    mirLightGreyscaleTransparent = {h: 0, s: 0, l: 1, a: 1},
    utilityLightGreyscaleGreyMedium3 = {h: 0, s: 0, l: 0.27058823529411763, a: 1},
    utilityLightGreyscaleAlmostTransparent4 = {h: 0, s: 0, l: 1, a: 0.00009999999747378752},
    utilityLightGreyscaleAlmostTransparent5 = {h: 0, s: 0, l: 1, a: 0.00009999999747378752},
    utilityLightGreyscaleAlmostTransparent6 = {h: 0, s: 0, l: 1, a: 0.00009999999747378752},
    utilityLightGreyscaleAlmostTransparent7 = {h: 0, s: 0, l: 1, a: 0.00009999999747378752},
    utilityLightGreyscaleAlmostTransparent8 = {h: 0, s: 0, l: 1, a: 0.00009999999747378752},
    utilityLightGreyscaleAlmostTransparent9 = {h: 0, s: 0, l: 1, a: 0.00009999999747378752},
    utilityLightGreyscaleAlmostTransparent10 = {h: 0, s: 0, l: 1, a: 0.00009999999747378752}
  } = {}) {
    /**
     * hsla(0, 0, 1, 1)
     */
    this.mirLightGreyscaleInverted = new Color(mirLightGreyscaleInverted);
    /**
     * hsla(0, 0, 1, 0)
     */
    this.utilityLightGreyscaleAlmostTransparent = new Color(utilityLightGreyscaleAlmostTransparent);
    /**
     * hsla(0, 0, 0.88, 1)
     */
    this.utilityLightGreyscaleGreyLight = new Color(utilityLightGreyscaleGreyLight);
    /**
     * hsla(0, 0, 0.17, 1)
     */
    this.utilityLightGreyscaleBlack = new Color(utilityLightGreyscaleBlack);
    /**
     * hsla(0, 0, 1, 0)
     */
    this.utilityLightGreyscaleAlmostTransparent1 = new Color(utilityLightGreyscaleAlmostTransparent1);
    /**
     * hsla(0, 0, 0.27, 1)
     */
    this.utilityLightGreyscaleGreyMedium = new Color(utilityLightGreyscaleGreyMedium);
    /**
     * hsla(0, 0, 1, 0)
     */
    this.utilityLightGreyscaleAlmostTransparent2 = new Color(utilityLightGreyscaleAlmostTransparent2);
    /**
     * hsla(0, 0, 1, 0)
     */
    this.utilityLightGreyscaleAlmostTransparent3 = new Color(utilityLightGreyscaleAlmostTransparent3);
    /**
     * hsla(0, 0, 0.27, 1)
     */
    this.utilityLightGreyscaleGreyMedium1 = new Color(utilityLightGreyscaleGreyMedium1);
    /**
     * hsla(0, 0, 1, 1)
     */
    this.utilityLightGreyscaleTransparent = new Color(utilityLightGreyscaleTransparent);
    /**
     * hsla(0, 0, 1, 1)
     */
    this.mirLightGreyscale0 = new Color(mirLightGreyscale0);
    /**
     * hsla(0.11, 0.95, 0.58, 1)
     */
    this.mirLightAccent1500 = new Color(mirLightAccent1500);
    /**
     * hsla(0.63, 0.86, 0.58, 1)
     */
    this.mirLightPrimary500 = new Color(mirLightPrimary500);
    /**
     * hsla(0.63, 0.87, 0.74, 1)
     */
    this.mirLightPrimary300 = new Color(mirLightPrimary300);
    /**
     * hsla(0.63, 0.86, 0.43, 1)
     */
    this.mirLightPrimary700 = new Color(mirLightPrimary700);
    /**
     * hsla(0.61, 0.25, 0.95, 1)
     */
    this.mirLightGreyscale100 = new Color(mirLightGreyscale100);
    /**
     * hsla(0.6, 0.28, 0.93, 1)
     */
    this.mirLightGreyscale200 = new Color(mirLightGreyscale200);
    /**
     * hsla(0.59, 0.15, 0.86, 1)
     */
    this.mirLightGreyscale300 = new Color(mirLightGreyscale300);
    /**
     * hsla(0.33, 0.76, 0.2, 1)
     */
    this.mirLightUtilityGreen1000 = new Color(mirLightUtilityGreen1000);
    /**
     * hsla(0.15, 0.85, 0.13, 1)
     */
    this.mirLightUtilityYellow1000 = new Color(mirLightUtilityYellow1000);
    /**
     * hsla(0, 0.76, 0.2, 1)
     */
    this.mirLightUtilityRed1000 = new Color(mirLightUtilityRed1000);
    /**
     * hsla(0.64, 0.86, 0.15, 1)
     */
    this.mirLightPrimary1000 = new Color(mirLightPrimary1000);
    /**
     * hsla(0.63, 0.85, 0.89, 1)
     */
    this.mirLightPrimary100 = new Color(mirLightPrimary100);
    /**
     * hsla(0.11, 0.95, 0.22, 1)
     */
    this.mirLightAccent11000 = new Color(mirLightAccent11000);
    /**
     * hsla(0.11, 0.96, 0.36, 1)
     */
    this.mirLightAccent1700 = new Color(mirLightAccent1700);
    /**
     * hsla(0.11, 0.95, 0.84, 1)
     */
    this.mirLightAccent1300 = new Color(mirLightAccent1300);
    /**
     * hsla(0.11, 0.93, 0.95, 1)
     */
    this.mirLightAccent1100 = new Color(mirLightAccent1100);
    /**
     * hsla(0, 0, 0.27, 1)
     */
    this.utilityLightGreyscaleGreyMedium2 = new Color(utilityLightGreyscaleGreyMedium2);
    /**
     * hsla(0, 0, 1, 1)
     */
    this.mirLightGreyscale100White = new Color(mirLightGreyscale100White);
    /**
     * hsla(0.6, 0.17, 0.91, 1)
     */
    this.mirLightGreyscale150 = new Color(mirLightGreyscale150);
    /**
     * hsla(0, 0, 1, 1)
     */
    this.mirLightGreyscale200White = new Color(mirLightGreyscale200White);
    /**
     * hsla(0.59, 0.15, 0.76, 1)
     */
    this.mirLightGreyscale400 = new Color(mirLightGreyscale400);
    /**
     * hsla(0.59, 0.15, 0.64, 1)
     */
    this.mirLightGreyscale500 = new Color(mirLightGreyscale500);
    /**
     * hsla(0.65, 0.1, 0.53, 1)
     */
    this.mirLightGreyscale600 = new Color(mirLightGreyscale600);
    /**
     * hsla(0.65, 0.1, 0.41, 1)
     */
    this.mirLightGreyscale700 = new Color(mirLightGreyscale700);
    /**
     * hsla(0.65, 0.09, 0.29, 1)
     */
    this.mirLightGreyscale800 = new Color(mirLightGreyscale800);
    /**
     * hsla(0.65, 0.1, 0.17, 1)
     */
    this.mirLightGreyscale900 = new Color(mirLightGreyscale900);
    /**
     * hsla(0.67, 0.1, 0.06, 1)
     */
    this.mirLightGreyscale1000 = new Color(mirLightGreyscale1000);
    /**
     * hsla(0.33, 0.77, 0.4, 1)
     */
    this.mirLightUtilityGreen700 = new Color(mirLightUtilityGreen700);
    /**
     * hsla(0.33, 0.77, 0.53, 1)
     */
    this.mirLightUtilityGreen500 = new Color(mirLightUtilityGreen500);
    /**
     * hsla(0.33, 0.77, 0.76, 1)
     */
    this.mirLightUtilityGreen300 = new Color(mirLightUtilityGreen300);
    /**
     * hsla(0.33, 0.8, 0.94, 1)
     */
    this.mirLightUtilityGreen100 = new Color(mirLightUtilityGreen100);
    /**
     * hsla(0.15, 0.83, 0.33, 1)
     */
    this.mirLightUtilityYellow700 = new Color(mirLightUtilityYellow700);
    /**
     * hsla(0.14, 0.84, 0.53, 1)
     */
    this.mirLightUtilityYellow500 = new Color(mirLightUtilityYellow500);
    /**
     * hsla(0.14, 0.84, 0.71, 1)
     */
    this.mirLightUtilityYellow300 = new Color(mirLightUtilityYellow300);
    /**
     * hsla(0.14, 0.87, 0.94, 1)
     */
    this.mirLightUtilityYellow100 = new Color(mirLightUtilityYellow100);
    /**
     * hsla(0, 0.78, 0.33, 1)
     */
    this.mirLightUtilityRed700 = new Color(mirLightUtilityRed700);
    /**
     * hsla(0, 0.77, 0.53, 1)
     */
    this.mirLightUtilityRed500 = new Color(mirLightUtilityRed500);
    /**
     * hsla(0, 0.77, 0.76, 1)
     */
    this.mirLightUtilityRed300 = new Color(mirLightUtilityRed300);
    /**
     * hsla(0, 0.8, 0.96, 1)
     */
    this.mirLightUtilityRed100 = new Color(mirLightUtilityRed100);
    /**
     * hsla(0, 0, 1, 1)
     */
    this.mirLightGreyscaleTransparent = new Color(mirLightGreyscaleTransparent);
    /**
     * hsla(0, 0, 0.27, 1)
     */
    this.utilityLightGreyscaleGreyMedium3 = new Color(utilityLightGreyscaleGreyMedium3);
    /**
     * hsla(0, 0, 1, 0)
     */
    this.utilityLightGreyscaleAlmostTransparent4 = new Color(utilityLightGreyscaleAlmostTransparent4);
    /**
     * hsla(0, 0, 1, 0)
     */
    this.utilityLightGreyscaleAlmostTransparent5 = new Color(utilityLightGreyscaleAlmostTransparent5);
    /**
     * hsla(0, 0, 1, 0)
     */
    this.utilityLightGreyscaleAlmostTransparent6 = new Color(utilityLightGreyscaleAlmostTransparent6);
    /**
     * hsla(0, 0, 1, 0)
     */
    this.utilityLightGreyscaleAlmostTransparent7 = new Color(utilityLightGreyscaleAlmostTransparent7);
    /**
     * hsla(0, 0, 1, 0)
     */
    this.utilityLightGreyscaleAlmostTransparent8 = new Color(utilityLightGreyscaleAlmostTransparent8);
    /**
     * hsla(0, 0, 1, 0)
     */
    this.utilityLightGreyscaleAlmostTransparent9 = new Color(utilityLightGreyscaleAlmostTransparent9);
    /**
     * hsla(0, 0, 1, 0)
     */
    this.utilityLightGreyscaleAlmostTransparent10 = new Color(utilityLightGreyscaleAlmostTransparent10);
  }
}


module.exports.MirDesignSystemColors = MirDesignSystemColors;

/**
 * Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,
 * and more. This component is used internally by [[Image]] and [[Font]].
 * 
 * The compiler may enforce certain restrictions on the `type` of a `File` instance.
 * 
 * Usage: `file = new File({src: 'assets/images/file.jpg', type: FileType.Image});`.
 *
 */
class File {
  constructor({
    src,
    type
  }) {
    /**
     * File data.
     *
     * assets/MirDesignSystem.figma.contents/fonts/Roboto-Medium.ttf
     */
    this.src = src;
    /**
     * File data.
     *
     * font
     */
    this.type = type;
  }
}


module.exports.File = File;

Object.defineProperties(File.prototype, {
  url: {
    get () {
      return `${Environment.serverUrl}/${this.src}`;
    },
  },
});

/**
 * A representation of a font resource, with a reference to a [[File]] containing a TTF or OTF font file.
 *
 */
class Font {
  constructor({
    file,
    name,
    fallbacks,
    weight,
    style
  }) {
    /**
     * Font data.
     *
     * assets/MirDesignSystem.figma.contents/fonts/Roboto-Medium.ttf
     */
    this.file = new File(file);
    /**
     * Font data.
     *
     * Roboto-Medium
     */
    this.name = name;
    /**
     * Font data.
     *
     * [sans-serif]
     */
    this.fallbacks = fallbacks;
    /**
     * Font data.
     *
     * 400
     */
    this.weight = weight;
    /**
     * Font data.
     *
     * normal
     */
    this.style = style;
  }
}


module.exports.Font = Font;

/**
 * Describes a typograph including specification of a font name (understood to specify both a font face and a font
 * weight) as well as a font size in device-local units and a font color.
 *
 */
class Typograph {
  constructor({
    font,
    fontSize,
    color,
    lineHeight,
    letterSpacing,
    alignment,
    decoration
  }) {
    /**
     * Typograph data.
     *
     * Roboto-Medium, 400, normal
     */
    this.font = new Font(font);
    /**
     * Typograph data.
     *
     * 76.23999786376953
     */
    this.fontSize = fontSize;
    /**
     * Typograph data.
     *
     * hsla(0, 0, 0.17, 1)
     */
    this.color = new Color(color);
    /**
     * Typograph data.
     *
     * 95.29999542236328
     */
    this.lineHeight = lineHeight;
    /**
     * Typograph data.
     *
     * 4.574399871826172
     */
    this.letterSpacing = letterSpacing;
    /**
     * Typograph data.
     *
     * natural
     */
    this.alignment = alignment;
    /**
     * Typograph data.
     *
     * []
     */
    this.decoration = decoration;
  }
}


module.exports.Typograph = Typograph;

const {fontToCss, FontFormats, textAlignmentToCss, textDecorationsToCss, GoogleFontCollection, GoogleFont} = require('@diez/web-sdk-common');

let styleSheet;
let cache;
const googleFontCollection = new GoogleFontCollection();

const registerFont = (font) => {
  if (!styleSheet || !cache) {
    const styleEl = document.createElement('style');
    document.head.appendChild(styleEl);
    styleSheet = styleEl.sheet;
    cache = new Set();
  }

  if (cache.has(font.file.src)) {
    return;
  }

  if (GoogleFont.isGoogleFont(font)) {
    googleFontCollection.set(font.name, {weight: font.weight, style: font.style});
    styleSheet.insertRule(`@import url(${collection.url})`);
    cache.add(font.file.src);
    return;
  }

  const format = font.file.src.split('.').pop();
  const rule = `
@font-face {
  font-family: '${font.name}';
  font-weight: ${font.weight};
  font-style: ${font.style};
  src: local('${font.name}'), url(${font.file.url}) format('${FontFormats[format] || format}');
}`;
  styleSheet.insertRule(rule);
  cache.add(font.file.src);
};

Object.defineProperties(Typograph.prototype, {
  fontFamily: {
    get () {
      registerFont(this.font);
      return fontToCss(this.font);
    },
  },
  style: {
    get () {
      const style = {
        fontFamily: this.fontFamily,
        fontWeight: this.font.fontWeight,
        fontStyle: this.font.fontStyle,
        fontSize: `${this.fontSize}px`,
        color: this.color.color,
        letterSpacing: `${this.letterSpacing}px`,
        textAlign: textAlignmentToCss(this.alignment),
        textDecoration: textDecorationsToCss(this.decoration),
      };
      if (this.lineHeight !== -1) {
        style.lineHeight = `${this.lineHeight}px`;
      }
      return style;
    },
  },
});

Typograph.prototype.applyStyle = function (ref) {
  const style = this.style;
  ref.style.fontFamily = style.fontFamily;
  ref.style.fontWeight = style.fontWeight;
  ref.style.fontStyle = style.fontStyle;
  ref.style.fontSize = style.fontSize;
  ref.style.color = style.color;
  ref.style.lineHeight = style.lineHeight;
  ref.style.letterSpacing = style.letterSpacing;
  ref.style.textAlign = style.textAlign;
};

diezHTMLExtensions.push(() => {
  HTMLElement.prototype.applyTypograph = (typograph) => {
    typograph.applyStyle(this);
  };
});

class MirDesignSystemTypography {
  constructor({
    headingXxLarge = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Roboto-Medium.ttf", type: "font"}, name: "Roboto-Medium", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 76.23999786376953, color: {h: 0, s: 0, l: 0.16862745098039217, a: 1}, lineHeight: 95.29999542236328, letterSpacing: 4.574399871826172, alignment: "natural", decoration: []},
    headingXLarge = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Roboto-Medium.ttf", type: "font"}, name: "Roboto-Medium", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 47.439998626708984, color: {h: 0, s: 0, l: 0.27058823529411763, a: 1}, lineHeight: 59.29999923706055, letterSpacing: 2.8463999176025387, alignment: "natural", decoration: []},
    labelMediumBold = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Gilroy-SemiBold.otf", type: "font"}, name: "Gilroy-SemiBold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 18, color: {h: 0, s: 0, l: 1, a: 1}, lineHeight: 13, letterSpacing: 0.6300000000000001, alignment: "natural", decoration: []},
    headingLarge = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Roboto-Medium.ttf", type: "font"}, name: "Roboto-Medium", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 29.31999969482422, color: {h: 0, s: 0, l: 0.27058823529411763, a: 1}, lineHeight: 36.650001525878906, letterSpacing: 1.759199981689453, alignment: "natural", decoration: []},
    headingH1 = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Montserrat-Bold.ttf", type: "font"}, name: "Montserrat-Bold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 60, color: {h: 0.6481481481481483, s: 0.10344827586206892, l: 0.17058823529411765, a: 1}, lineHeight: 72, letterSpacing: 1, alignment: "natural", decoration: []},
    paragraphSmall = {font: {file: {src: "", type: "font"}, name: "OpenSans-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 12.5, color: {h: 0.6481481481481483, s: 0.10344827586206892, l: 0.17058823529411765, a: 1}, lineHeight: 22, letterSpacing: 0.5, alignment: "natural", decoration: []},
    paragraphLarge = {font: {file: {src: "", type: "font"}, name: "OpenSans-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 29, color: {h: 0.6481481481481483, s: 0.10344827586206892, l: 0.17058823529411765, a: 1}, lineHeight: 43.5, letterSpacing: 0.5, alignment: "natural", decoration: []},
    headingH2 = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Montserrat-Bold.ttf", type: "font"}, name: "Montserrat-Bold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 37.08281707763672, color: {h: 0.6481481481481483, s: 0.10344827586206892, l: 0.17058823529411765, a: 1}, lineHeight: 48.94932174682617, letterSpacing: 0, alignment: "natural", decoration: []},
    paragraphMedium = {font: {file: {src: "", type: "font"}, name: "OpenSans-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 16, color: {h: 0.6481481481481483, s: 0.10344827586206892, l: 0.17058823529411765, a: 1}, lineHeight: 28, letterSpacing: 0.5, alignment: "natural", decoration: []},
    headingH3 = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Montserrat-Bold.ttf", type: "font"}, name: "Montserrat-Bold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 22.91718101501465, color: {h: 0.6481481481481483, s: 0.10344827586206892, l: 0.17058823529411765, a: 1}, lineHeight: 34.375770568847656, letterSpacing: 0, alignment: "natural", decoration: []},
    headingH4 = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Montserrat-Bold.ttf", type: "font"}, name: "Montserrat-Bold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 16, color: {h: 0.6481481481481483, s: 0.10344827586206892, l: 0.17058823529411765, a: 1}, lineHeight: 24, letterSpacing: 0, alignment: "natural", decoration: []},
    labelSmallUppercase = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Roboto-Medium.ttf", type: "font"}, name: "Roboto-Medium", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 12, color: {h: 0, s: 0, l: 0.27058823529411763, a: 1}, lineHeight: 9, letterSpacing: 1.2000000000000002, alignment: "natural", decoration: []},
    labelSingleMediumUppercaseBold = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Montserrat-Bold.ttf", type: "font"}, name: "Montserrat-Bold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 16, color: {h: 0.6666666666666666, s: 0.0967741935483871, l: 0.060784313725490195, a: 1}, lineHeight: 13, letterSpacing: 2, alignment: "natural", decoration: []},
    labelSingleMediumBold = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Montserrat-Bold.ttf", type: "font"}, name: "Montserrat-Bold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 16, color: {h: 0.6666666666666666, s: 0.0967741935483871, l: 0.060784313725490195, a: 1}, lineHeight: 13, letterSpacing: 1, alignment: "natural", decoration: []},
    labelSingleMediumRegular = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Montserrat-Regular.ttf", type: "font"}, name: "Montserrat-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 16, color: {h: 0.6666666666666666, s: 0.0967741935483871, l: 0.060784313725490195, a: 1}, lineHeight: 13, letterSpacing: 1, alignment: "natural", decoration: []},
    labelSingleSmallUppercaseBold = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Montserrat-Bold.ttf", type: "font"}, name: "Montserrat-Bold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 11, color: {h: 0.6666666666666666, s: 0.0967741935483871, l: 0.060784313725490195, a: 1}, lineHeight: 9, letterSpacing: 2, alignment: "natural", decoration: []},
    labelSingleSmallBold = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Montserrat-Bold.ttf", type: "font"}, name: "Montserrat-Bold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 12, color: {h: 0.6666666666666666, s: 0.0967741935483871, l: 0.060784313725490195, a: 1}, lineHeight: 9, letterSpacing: 1, alignment: "natural", decoration: []},
    labelSingleSmallRegular = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Montserrat-Regular.ttf", type: "font"}, name: "Montserrat-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 12, color: {h: 0.6666666666666666, s: 0.0967741935483871, l: 0.060784313725490195, a: 1}, lineHeight: 9, letterSpacing: 0.36, alignment: "natural", decoration: []},
    labelSmall = {font: {file: {src: "assets/MirDesignSystem.figma.contents/fonts/Roboto-Bold.ttf", type: "font"}, name: "Roboto-Bold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 12, color: {h: 0.6666666666666666, s: 0.0967741935483871, l: 0.060784313725490195, a: 1}, lineHeight: 9, letterSpacing: 0.42000000000000004, alignment: "natural", decoration: []}
  } = {}) {
    /**
     * - font: `Roboto-Medium, 400, normal`
     * - fontSize: `76.23999786376953`
     * - color: `hsla(0, 0, 0.17, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `95.29999542236328`
     * - letterSpacing: `4.574399871826172`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.headingXxLarge = new Typograph(headingXxLarge);
    /**
     * - font: `Roboto-Medium, 400, normal`
     * - fontSize: `47.439998626708984`
     * - color: `hsla(0, 0, 0.27, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `59.29999923706055`
     * - letterSpacing: `2.8463999176025387`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.headingXLarge = new Typograph(headingXLarge);
    /**
     * - font: `Gilroy-SemiBold, 400, normal`
     * - fontSize: `18`
     * - color: `hsla(0, 0, 1, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `13`
     * - letterSpacing: `0.6300000000000001`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.labelMediumBold = new Typograph(labelMediumBold);
    /**
     * - font: `Roboto-Medium, 400, normal`
     * - fontSize: `29.31999969482422`
     * - color: `hsla(0, 0, 0.27, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `36.650001525878906`
     * - letterSpacing: `1.759199981689453`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.headingLarge = new Typograph(headingLarge);
    /**
     * - font: `Montserrat-Bold, 400, normal`
     * - fontSize: `60`
     * - color: `hsla(0.65, 0.1, 0.17, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `72`
     * - letterSpacing: `1`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.headingH1 = new Typograph(headingH1);
    /**
     * - font: `OpenSans-Regular, 400, normal`
     * - fontSize: `12.5`
     * - color: `hsla(0.65, 0.1, 0.17, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `22`
     * - letterSpacing: `0.5`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.paragraphSmall = new Typograph(paragraphSmall);
    /**
     * - font: `OpenSans-Regular, 400, normal`
     * - fontSize: `29`
     * - color: `hsla(0.65, 0.1, 0.17, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `43.5`
     * - letterSpacing: `0.5`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.paragraphLarge = new Typograph(paragraphLarge);
    /**
     * - font: `Montserrat-Bold, 400, normal`
     * - fontSize: `37.08281707763672`
     * - color: `hsla(0.65, 0.1, 0.17, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `48.94932174682617`
     * - letterSpacing: `0`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.headingH2 = new Typograph(headingH2);
    /**
     * - font: `OpenSans-Regular, 400, normal`
     * - fontSize: `16`
     * - color: `hsla(0.65, 0.1, 0.17, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `28`
     * - letterSpacing: `0.5`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.paragraphMedium = new Typograph(paragraphMedium);
    /**
     * - font: `Montserrat-Bold, 400, normal`
     * - fontSize: `22.91718101501465`
     * - color: `hsla(0.65, 0.1, 0.17, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `34.375770568847656`
     * - letterSpacing: `0`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.headingH3 = new Typograph(headingH3);
    /**
     * - font: `Montserrat-Bold, 400, normal`
     * - fontSize: `16`
     * - color: `hsla(0.65, 0.1, 0.17, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `24`
     * - letterSpacing: `0`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.headingH4 = new Typograph(headingH4);
    /**
     * - font: `Roboto-Medium, 400, normal`
     * - fontSize: `12`
     * - color: `hsla(0, 0, 0.27, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `9`
     * - letterSpacing: `1.2000000000000002`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.labelSmallUppercase = new Typograph(labelSmallUppercase);
    /**
     * - font: `Montserrat-Bold, 400, normal`
     * - fontSize: `16`
     * - color: `hsla(0.67, 0.1, 0.06, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `13`
     * - letterSpacing: `2`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.labelSingleMediumUppercaseBold = new Typograph(labelSingleMediumUppercaseBold);
    /**
     * - font: `Montserrat-Bold, 400, normal`
     * - fontSize: `16`
     * - color: `hsla(0.67, 0.1, 0.06, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `13`
     * - letterSpacing: `1`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.labelSingleMediumBold = new Typograph(labelSingleMediumBold);
    /**
     * - font: `Montserrat-Regular, 400, normal`
     * - fontSize: `16`
     * - color: `hsla(0.67, 0.1, 0.06, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `13`
     * - letterSpacing: `1`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.labelSingleMediumRegular = new Typograph(labelSingleMediumRegular);
    /**
     * - font: `Montserrat-Bold, 400, normal`
     * - fontSize: `11`
     * - color: `hsla(0.67, 0.1, 0.06, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `9`
     * - letterSpacing: `2`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.labelSingleSmallUppercaseBold = new Typograph(labelSingleSmallUppercaseBold);
    /**
     * - font: `Montserrat-Bold, 400, normal`
     * - fontSize: `12`
     * - color: `hsla(0.67, 0.1, 0.06, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `9`
     * - letterSpacing: `1`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.labelSingleSmallBold = new Typograph(labelSingleSmallBold);
    /**
     * - font: `Montserrat-Regular, 400, normal`
     * - fontSize: `12`
     * - color: `hsla(0.67, 0.1, 0.06, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `9`
     * - letterSpacing: `0.36`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.labelSingleSmallRegular = new Typograph(labelSingleSmallRegular);
    /**
     * - font: `Roboto-Bold, 400, normal`
     * - fontSize: `12`
     * - color: `hsla(0.67, 0.1, 0.06, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `9`
     * - letterSpacing: `0.42000000000000004`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.labelSmall = new Typograph(labelSmall);
  }
}


module.exports.MirDesignSystemTypography = MirDesignSystemTypography;

/**
 * Provides a two dimensional point.
 * 
 * Taken alone, points are designated in an abstract space with no inherit dimensions or directionality. In the
 * context of other prefabs like [[LinearGradient]], points typically should use the standard two dimensional graphics
 * space, often normalized in the unit square, where x increases from left to right and y increases from top to bottom.
 * 
 * Usage: `point = Point2D.make(0.5, 0.5);`.
 *
 */
class Point2D {
  constructor({
    x,
    y
  }) {
    /**
     * Point data.
     *
     * 0
     */
    this.x = x;
    /**
     * Point data.
     *
     * 3
     */
    this.y = y;
  }
}


module.exports.Point2D = Point2D;

/**
 * Provides a drop shadow.
 *
 */
class DropShadow {
  constructor({
    offset,
    radius,
    color
  }) {
    /**
     * DropShadow data.
     *
     * [0, 3]
     */
    this.offset = new Point2D(offset);
    /**
     * DropShadow data.
     *
     * 6
     */
    this.radius = radius;
    /**
     * DropShadow data.
     *
     * hsla(0, 0, 0, 0.12)
     */
    this.color = new Color(color);
  }
}


module.exports.DropShadow = DropShadow;

const {dropShadowToCss, dropShadowToFilterCss} = require('@diez/web-sdk-common');

Object.defineProperties(DropShadow.prototype, {
  boxShadow: {
    get () {
      return dropShadowToCss(this);
    },
  },
  textShadow: {
    get () {
      return dropShadowToCss(this);
    },
  },
  filter: {
    get () {
      return dropShadowToFilterCss(this);
    },
  },
  boxShadowStyle: {
    get () {
      return {
        boxShadow: this.boxShadow,
      };
    },
  },
  textShadowStyle: {
    get () {
      return {
        textShadow: this.textShadow,
      };
    },
  },
  filterStyle: {
    get () {
      return {
        filter: this.filter,
      };
    },
  },
});

class MirDesignSystemShadows {
  constructor({
    utilityLightArtboardShadow = {offset: {x: 0, y: 3}, radius: 6, color: {h: 0, s: 0, l: 0, a: 0.11999999731779099}},
    utilityLightColorSwatchShadow = {offset: {x: 0, y: 2}, radius: 5, color: {h: 0, s: 0, l: 0, a: 0.2800000011920929}},
    utilityLightColorSwatchShadow1 = {offset: {x: 0, y: 2}, radius: 5, color: {h: 0, s: 0, l: 0, a: 0.2800000011920929}},
    utilityLightColorSwatchShadow2 = {offset: {x: 0, y: 2}, radius: 5, color: {h: 0, s: 0, l: 0, a: 0.2800000011920929}},
    mirLightShadowLarge = {offset: {x: 0, y: 2}, radius: 34, color: {h: 0, s: 0, l: 0.6078431372549019, a: 0.5}}
  } = {}) {
    /**
     * - offset: `[0, 3]`
     * - radius: `6`
     * - color: `hsla(0, 0, 0, 0.12)`
     */
    this.utilityLightArtboardShadow = new DropShadow(utilityLightArtboardShadow);
    /**
     * - offset: `[0, 2]`
     * - radius: `5`
     * - color: `hsla(0, 0, 0, 0.28)`
     */
    this.utilityLightColorSwatchShadow = new DropShadow(utilityLightColorSwatchShadow);
    /**
     * - offset: `[0, 2]`
     * - radius: `5`
     * - color: `hsla(0, 0, 0, 0.28)`
     */
    this.utilityLightColorSwatchShadow1 = new DropShadow(utilityLightColorSwatchShadow1);
    /**
     * - offset: `[0, 2]`
     * - radius: `5`
     * - color: `hsla(0, 0, 0, 0.28)`
     */
    this.utilityLightColorSwatchShadow2 = new DropShadow(utilityLightColorSwatchShadow2);
    /**
     * - offset: `[0, 2]`
     * - radius: `34`
     * - color: `hsla(0, 0, 0.61, 0.5)`
     */
    this.mirLightShadowLarge = new DropShadow(mirLightShadowLarge);
  }
}


module.exports.MirDesignSystemShadows = MirDesignSystemShadows;

class DesignLanguage {
  constructor({
    name = "mir",
    colors = {},
    typography = {},
    shadows = {}
  } = {}) {
    /**
     * mir
     */
    this.name = name;
    this.colors = new MirDesignSystemColors(colors);
    this.typography = new MirDesignSystemTypography(typography);
    this.shadows = new MirDesignSystemShadows(shadows);
  }
}

Object.defineProperty(DesignLanguage, 'name', {value: 'DesignLanguage'});

module.exports.DesignLanguage = DesignLanguage;

