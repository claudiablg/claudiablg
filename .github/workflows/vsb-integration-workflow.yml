#
# Github Workflow config file
#
# - reference: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
#

name: vsb-integration

on:
  workflow_dispatch:
    inputs:
      ci_api:
        description: "CI pipeline name for the api"
        required: false
        default: "vsb-api-workflow.yml"
      ci_website:
        description: "CI pipeline name for website"
        required: false
        default: "vsb-website-workflow.yml"

env:
  #
  # Debugging
  #
  DEBUG: 'newrade:*'
  #
  # Node
  #
  NODE_OPTIONS: '--max-old-space-size=4096'
  #
  # NVM
  #
  NVM_NODE_VERSION: ${{ secrets.NVM_NODE_VERSION }}
  #
  # Repo
  #
  MASTER_GIT_HOST: ${{ secrets.MASTER_GIT_HOST }}
  MASTER_REPO_ORG: ${{ secrets.MASTER_REPO_ORG }}
  MASTER_REPO_NAME: ${{ secrets.MASTER_REPO_NAME }}
  PROJECT_GIT_HOST: ${{ secrets.PROJECT_GIT_HOST }}
  PROJECT_REPO_ORG: ${{ secrets.PROJECT_REPO_ORG }}
  PROJECT_REPO_NAME: ${{ secrets.PROJECT_REPO_NAME }}
  #
  # App
  #
  APP_DOMAIN: vasectomie-pierre-boucher.ca
  APP_SUBDOMAIN: ''

jobs:
  build-test-deploy:
    #
    # To enable github's runner : ubuntu-latest
    #
    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.9.0
      with:
        all_but_latest: true
        access_token: ${{ github.token }}

    - name: Inject Github slug/short variables
      uses: rlespinasse/github-slug-action@v3.x

    - name: Check vsb-website Build Status
      uses: ./packages/core-github-actions/built/check-workflow-status
      with:
        workflow: ${{ github.event.inputs.ci_website }}
        github-token: ${{ secrets.PERSONAL_GH_TOKEN }}
      id: check_website

    - name: Abort if vsb-website was not successful
      if: steps.check_website.outputs.conclusion == 'failure'
      run: |
        echo ${{ steps.check_website.outputs.conclusion }}
        exit 1

    - name: Check vsb-api Build Status
      uses: ./packages/core-github-actions/built/check-workflow-status
      with:
        workflow: ${{ github.event.inputs.ci_api }}
        github-token: ${{ secrets.PERSONAL_GH_TOKEN }}
      id: check_api

    - name: Abort if vsb-api was not successful
      if: steps.check_api.outputs.conclusion == 'failure'
      run: |
        echo ${{ steps.check_api.outputs.conclusion }}
        exit 1

    - name: Checkout
      if: ${{ steps.check_api.outputs.conclusion == 'success' && steps.check_website.outputs.conclusion == 'success' }}
      uses: actions/checkout@v2
      with:
        clean: false

    - name: Set up Node.js ${{ matrix.node-version }}
      if: ${{ steps.check_api.outputs.conclusion == 'success' && steps.check_website.outputs.conclusion == 'success' }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Set up yarn
      if: ${{ steps.check_api.outputs.conclusion == 'success' && steps.check_website.outputs.conclusion == 'success' }}
      run: npm install --global yarn && yarn --version

    - name: Check NodeJS Options
      if: ${{ steps.check_api.outputs.conclusion == 'success' && steps.check_website.outputs.conclusion == 'success' }}
      run: echo ${{ env.NODE_OPTIONS }} && node -e 'console.log(`node heap limit = ${require("v8").getHeapStatistics().heap_size_limit / (1024 * 1024)} Mb`)'

    - name: Set the env variable depending on the branch
      if: ${{ steps.check_api.outputs.conclusion == 'success' && steps.check_website.outputs.conclusion == 'success' }}
      uses: ./packages/core-github-actions/built/set-app-env

    - name: Install dependencies and build core packages
      if: ${{ steps.check_api.outputs.conclusion == 'success' && steps.check_website.outputs.conclusion == 'success' }}
      run: yarn --prefer-offline --frozen-lockfile

    - name: Run E2E Test
      if: ${{ env.APP_CI_DEPLOY && steps.check_api.outputs.conclusion == 'success' && steps.check_website.outputs.conclusion == 'success' }}
      run: yarn lerna:test:e2e --scope @newrade/vsb-website
      env:
        TEST_HOST: ${{ env.APP_HOST }}

